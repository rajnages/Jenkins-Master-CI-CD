pipeline {
    agent any

    tools {
        maven 'Maven3'
        jdk 'JDK17'
    }

    environment{
        GIT_URL = "https://github.com/rajnages/Jenkins-Master-CI-CD.git"
        // SONAR_URL = "http://localhost:9000" // SonarQube server URL
    }

    parameters {
        string(name: 'BRANCH', defaultValue: 'main', description: 'Branch to build')
        choice(name: 'ENVIRONMENT', choices: ['dev', 'qa', 'prod'], description: 'Deployment Environment')
    }

    options {
        timestamps() // Add timestamps to logs
        timeout(time: 2, unit: 'HOURS') // Timeout after 2 hours
        buildDiscarder(logRotator(numToKeepStr: '10')) // Keep only the last 10 builds
    }

    stages {
        stage('Checkout') {
            steps {
                // Get code from GitHub repository
                git branch: "${params.BRANCH}", url: GIT_URL
            }
        }

        stage('Build') {
            steps {
                // Run Maven build
                dir('hello-world') {
                    sh 'mvn clean compile'
                }
            }
        }

        stage("Testing Plan"){
            steps{
                echo "This is normal step"
            }
        }

        stage('Parallel Tasks') {
            parallel {
                stage('Static Analysis') {
                    steps {
                        echo "Running static analysis..."
                        // Uses the Maven checkstyle:check plugin to analyze the source code for coding standards violations.
                        dir('hello-world'){
                            sh 'mvn checkstyle:check'
                        }
                    }
                }
                stage('Dependency Check') {
                    steps {
                        echo "Checking dependencies..."
                        //Uses the Maven dependency:analyze plugin to identify unused or missing dependencies in the project.
                        dir('hello-world'){
                            sh 'mvn dependency:analyze'
                        }
                    }
                }
            }
        }

        stage('Test') {
            steps {
                // Run Maven tests
                dir('hello-world') {
                    sh 'mvn test'
                }
            }
            post {
                // Save test results
                always {
                    junit '**/target/surefire-reports/*.xml'
                }
            }
        }

        stage('Package') {
            steps {
                // Create JAR file
                dir('hello-world') {
                    sh 'mvn package'
                    // Archive the artifacts
                    archiveArtifacts artifacts: 'target/*.jar',
                                     fingerprint: true
                }
            }
        }

        stage("Run Application") {
            steps {
                dir('hello-world') {
                    sh 'java -jar target/*.jar'
                }
            }
        }

        // stage('Code Analysis') {
        //     steps {
        //         // SonarQube analysis
        //         dir('hello-world') {
        //             withSonarQubeEnv('SonarQube') {
        //                 sh '''
        //                     mvn sonar:sonar \
        //                     -Dsonar.projectKey=my-project \
        //                     -Dsonar.host.url=$SONAR_URL \
        //                     -Dsonar.login=$SONAR_TOKEN
        //                 '''
        //             }
        //         }
        //     }
        // }

        // stage('Quality Gate') {
        //     steps {
        //         timeout(time: 1, unit: 'HOURS') {
        //             waitForQualityGate abortPipeline: true
        //         }
        //     }
        // }

        stage('Deploy to Dev') {
            when {
                branch 'develop'
            }
            steps {
                echo 'Deploying to Development environment...'
                // Add your deployment steps here
            }
        }

        stage('Deploy to Prod') {
            when {
                branch 'main'
            }
            steps {
                // Add approval step
                input message: 'Approve Production Deployment?'

                echo 'Deploying to Production environment...'
                // Add your production deployment steps here
            }
        }
    }

    post {
        success {
            echo 'Pipeline succeeded! Sending notifications...'
            // emailext (
            //     subject: "Pipeline Successful: ${currentBuild.fullDisplayName}",
            //     body: "The pipeline completed successfully.",
            //     to: 'team@example.com'
            // )
        }

        failure {
            echo 'Pipeline failed! Sending notifications...'
            // emailext (
            //     subject: "Pipeline Failed: ${currentBuild.fullDisplayName}",
            //     body: "The pipeline failed. Please check the logs.",
            //     to: 'team@example.com'
            // )
        }

        always {
            // Clean workspace
            cleanWs()
        }
    }
}
